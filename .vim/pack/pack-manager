#!/usr/bin/env bash
# Install and Update vim plugins

pushd () {
  command pushd "$@" > /dev/null
}

popd () {
  command popd "$@" > /dev/null
}

readonly SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
readonly PACK_PATH=".vim/pack"
 
pushd "$HOME/.vim/pack"
pushd "$(git rev-parse --show-toplevel)"

blk='\033[1;30m'   # Black
red='\033[1;31m'   # Red
grn='\033[1;32m'   # Green
ylw='\033[1;33m'   # Yellow
blu='\033[1;34m'   # Blue
pur='\033[1;35m'   # Purple
cyn='\033[1;36m'   # Cyan
wht='\033[1;37m'   # White
clr='\033[0m'      # Reset

err() {
  echo -e "${red}ERROR: $*${clr}" >&2
}

bug() {
  echo -e "${cyn}A bug occured. Please copy the following message and report the bug here: https://github.com/shadday007/vim."
  echo -e "$*${clr}"
}

yesornot() {
  local answer

  while true; do
      read -p "$1 (y/n)?" yn
      case $yn in
          [Yy]* ) answer="y"; break;;
          [Nn]* ) answer="n"; break;;
          * ) err "Please answer yes or not.";;
      esac
  done
  echo "$answer"
}

usage() {
  echo -e "\n\n\n\n\n\n\n\n"
  echo -e "Usage:\n ${grn}pack-manager [subcommand] [options]${clr}"
  echo -e "${ylw}Subcommands:${wht}"
  echo -e " ${pur}group     ${wht}'name'                                    ${clr}Prepare directory for the group name"
  echo -e " ${pur}rmgroup   ${wht}'name'                                    ${clr}Remove the group name directory if empty"
  echo -e " ${pur}install   ${wht}'username/repository' 'group' 'opt|start' ${clr}Installs or update a plugin"
  echo -e " ${pur}uninstall ${wht}'repository'                              ${clr}Uninstall plugin"
  echo -e " ${pur}list      ${wht}                                          ${clr}List installed plugins"
  echo -e " ${pur}update    ${wht}                                          ${clr}Update installed plugins"
  echo -e " ${pur}clean     ${wht}                                          ${clr}Cleans up all empty directories"
  echo -e " ${pur}process   ${wht}[filename]                                ${clr}Process commands from filename"
  echo -e " ${pur}          ${wht}                                          ${clr}Default: ~/.vim/plugins.pack"
}

dir_exists() {
  local dir=$1

  if [[ -d "$dir" ]]; then
    true
  else
    false
  fi
}

file_exists() {
  local file=$1

  if [[ -f "$file" ]]; then
    true
  else
    false
  fi
}

check_dir() {
  local dir=$1

  if ! dir_exists "$dir"; then
    mkdir -p  "$dir"
  fi
}

check_arg() {
  local arg=$1

  if [[ -z "$arg" ]]; then
    usage
    exit_pm
  fi
}

group() {
  group=$1

  for dir in  "${PACK_PATH}/${group}"/{start,opt} ; do
    if [[ ! -d "$dir" ]]; then
      mkdir -p  "$dir"
      echo -e "${grn}Directory ${cyn}$dir ${grn}has been created.${clr}"
    else
      echo -e "${grn}Directory ${cyn}$dir ${grn}is already created.${clr}"
    fi
  done
}

rmgroup() {
  group=$1

  dir="${PACK_PATH}/${group}"
  dir_opt="$dir"/opt
  dir_start="$dir"/start

  if [[ -d "$dir" ]]; then
    if [[ "$(ls -A $dir_opt)" || "$(ls -A $dir_start)" ]]; then
      echo "Take action $dir is not Empty"
    else
      echo "$dir is Empty"
      rm -rf $dir
      echo -e "${grn}Group directory ${cyn}$dir ${grn}has been deleted.${clr}"
    fi
  else
    echo "Package group $group not found."
  fi

}

# install the repo, e.g. $1="USER/NAME" $2="colors" $3="start"
install() {
  local plugin=$1
  local group=$2
  local opt=${3,,}
  local repository="https://github.com/$plugin.git"
  local package=$(basename "$repository" .git)
  local git_root="$(git rev-parse --show-toplevel)"
  local group_dir="$PACK_PATH/$group/$opt"
  local pack_dir="$group_dir/$package"

  if ! git ls-remote --exit-code -h "$repository" > /dev/null; then
    err "Template repository $repository not found."
    exit_pm
  fi

  local whereIsInstalled=$(list | grep $package)
  if [[ ! -z "$whereIsInstalled" ]]; then
    local  inGroup=$(echo "$whereIsInstalled" | cut -d "/" -f1)
    local  inOpt=$(echo "$whereIsInstalled" | cut -d "/" -f2)

    if [[ "$group" == "$inGroup" && "$opt" == "$inOpt" ]]; then
      echo "repo is already installed, updating..."
      git submodule update --remote "$pack_dir"
    else
      echo -e "Plugin installed in group: ${cyn}$inGroup${clr} option: ${cyn}$inOpt${clr}"
      echo -e "Please uninstall first."
    fi
  else
    if [[ ! -d "$group_dir" ]]; then
      echo -e "${ylw}Warning: ${cyn}$group_dir${ylw} doesn't exist.${clr}"
      answer=$(yesornot "Do you want continue ")
      if [[ "$answer" == "y" ]]; then
        echo -e "Configuring ${cyn}$group${clr}..."
        group "$group"

        echo -e "repo ${cyn}$repository${clr} is installing..."
        check_dir "$group_dir"

        git submodule init
        git submodule add --force "$repository" "$pack_dir"
        git add .gitmodules "$pack_dir"
      fi
    fi
  fi
}

uninstall() {
  local package=$1
  local git_root="$(git rev-parse --show-toplevel)"
  local whereIsInstalled=$(list | grep $package)
  local inGroup=$(echo "$whereIsInstalled" | cut -d "/" -f1)
  local inOpt=$(echo "$whereIsInstalled" | cut -d "/" -f2)
  local group_dir="$PACK_PATH/$inGroup/$inOpt"
  local pack_dir="$group_dir/$package"

  if [[ ! -z "$whereIsInstalled" ]]; then

    echo "repo is already installed, deleting..."
    git submodule deinit -f "$pack_dir"
    git rm -f "$pack_dir"
    rm -rf .git/modules/"$pack_dir"
  
    echo -e "${grn}Uninstalled ${cyn}$package.${clr}"
  else
    echo "repo is not installed."
  fi
}

list() {
# iterate over each GROUP and REPOSITORY stored in $PACK_PATH
  for GROUP in "$PACK_PATH"/*; do
    if [[ -d "$GROUP" ]]; then
      for OPT in "$GROUP"/{start,opt}; do
        for REPOSITORY in  "$OPT"/* ; do
          [[ -e "$REPOSITORY" ]] || break # handle empty $PACK_PATH
          [[ -d "$REPOSITORY" ]] || break # handle files
          echo "$(basename -- "$GROUP")/$(basename -- "$OPT")/$(basename -- "$REPOSITORY")"
        done
      done
   fi
  done
}

update() {
  local packages
  packages=$(list)

  if [[ -z "$packages" ]]; then
    err "No packages installed."
    exit_pm
  fi

  for package in $packages; do
    #pushd "$PACK_PATH"/"$package" || exit_pm
    echo -e "${ylw}Updating package ${cyn}$package${clr}"
    git submodule update --remote --merge "$PACK_PATH"/"$package"
    #git commit -m "chore(pm): Update $plugin using the script pm"
    #popd
  done

  echo -e "${grn}All packages updated.${clr}"
}

# remove all empty directories in $PACK_PATH
clean() {
  find "$PACK_PATH" -maxdepth 3 -type d -empty -delete

  check_pack_dir

  echo -e "${grn}Cleaned up ${cyn}$PACK_PATH.${clr}"
}

check_pack_dir() {

  dir_exists "$PACK_PATH" || mkdir "$PACK_PATH"

}


# TODO: Use file ($1=filename) to install plugins.
install_from_file() {
  local file=${1:-~/.vim/plugins.pack}

  while read -r line; do

    line=$(echo $line | sed -e 's/\([[:blank:]]\+\|^\)#[^!].*$//') #remove comment, don't remove shebang [^!]
    line=$(echo $line | sed -e 's/^[[:blank:]]*$//')               #remove blank line

    if [[ ! -z "$line" ]]; then
      option=$(echo $line | cut -d' ' -f1)
      arg=$(echo $line | cut -d' ' -f2)
      arg2=$(echo $line | cut -d' ' -f3)
      arg3=$(echo $line | cut -d' ' -f4)

      process_option "$option" "$arg" "$arg2" "$arg3"
    fi

  done <"$file"
}

exit_pm() {
  popd
  popd
  exit
}

#  pause "Press [Enter] key to continue..."
pause(){
   read -p "$*"
}

process_option() {
  local option=${1,,}
  local arg=${2,,}
  local arg2=${3,,}
  local arg3=${4,,}

  case $option in
    "install")
      check_arg "$arg"
      check_arg "$arg2"
      check_arg "$arg3"
      install "$arg" "$arg2" "$arg3"
      ;;
    "uninstall")
      check_arg "$arg"
      uninstall "$arg" 
      ;;
    "list")
      echo -e "${grn}\nList of plugins installed by group:${clr}"
      list
      ;;
    "update")
      update
      ;;
    "group")
      check_arg "$arg"
      group "$arg"
      ;;
    "process")
      install_from_file "$arg"
      ;;
    "rmgroup")
      check_arg "$arg"
      rmgroup "$arg"
      ;;
    "clean")
      clean
      ;;
    *)
      usage
      ;;
  esac
}

main() {
  local option=$1
  local arg=$2
  local arg2=$3
  local arg3=$4

  check_pack_dir
  
  if [[ -z "$option" ]]; then
    usage
    exit_pm
  fi

  process_option "$option" "$arg" "$arg2" "$arg3"

  exit_pm
}

main "$@"
